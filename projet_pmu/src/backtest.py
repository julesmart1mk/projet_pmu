import pandas as pd
import numpy as np
import pickle
import warnings
from tqdm import tqdm
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
import lightgbm as lgb
import xgboost as xgb
from catboost import CatBoostRanker
from projet_pmu.src import config

def train_temporary_model(train_df):
    """Entra√Æne un comit√© d'experts sur un jeu de donn√©es sp√©cifique."""
    
    # Pr√©pare les donn√©es pour l'entra√Ænement
    train_df = train_df.sort_values('COURSE_ID')
    train_df['ranking_target'] = train_df.groupby('COURSE_ID')['PLACE_CHEVAL'].transform(lambda x: x.max() - x + 1)
    TARGET = 'ranking_target'
    features = [f for f in config.FEATURES_TO_USE if f in train_df.columns]
    X_train = train_df[features]
    y_train = train_df[TARGET]
    train_groups = train_df.groupby('COURSE_ID').size().to_numpy()

    # Cr√©ation des 3 mod√®les experts avec des param√®tres par d√©faut robustes
    lgbm = lgb.LGBMRanker(random_state=42, verbosity=-1)
    xgbr = xgb.XGBRanker(random_state=42, eval_metric='ndcg', verbosity=0)
    catr = CatBoostRanker(random_state=42, verbose=0)
    
    # Cr√©ation du pr√©-processeur
    categorical_cols = [f for f in config.CATEGORICAL_FEATURES if f in X_train.columns]
    preprocessor = ColumnTransformer(transformers=[('cat', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_cols)], remainder='passthrough')

    # Cr√©ation des pipelines pour chaque mod√®le
    lgbm_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('ranker', lgbm)])
    xgb_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('ranker', xgbr)])
    cat_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('ranker', catr)])
    
    # Entra√Ænement des 3 mod√®les
    lgbm_pipeline.fit(X_train, y_train, ranker__group=train_groups)
    xgb_pipeline.fit(X_train, y_train, ranker__group=train_groups)
    cat_pipeline.fit(X_train, y_train, ranker__group_id=train_df['COURSE_ID'].to_numpy())
    
    return lgbm_pipeline, xgb_pipeline, cat_pipeline

def softmax(x):
    e_x = np.exp(x - np.max(x))
    return e_x / e_x.sum(axis=0)

def run_backtest():
    print("--- üèÅ Lancement du Backtest Chronologique (√âpreuve du Feu) ---")
    
    try:
        df_full = pd.read_parquet(config.CLEAN_DATA_PATH)
        df_full.dropna(subset=[config.TARGET_COLUMN], inplace=True)
        df_full['DATE'] = pd.to_numeric(df_full['DATE'])
    except FileNotFoundError:
        print("‚ùå Erreur : Le fichier de donn√©es propres n'existe pas. Lancez d'abord un entra√Ænement.")
        return

    # On trie les courses par date
    sorted_dates = sorted(df_full['DATE'].unique())
    print(f"üîé {len(sorted_dates)} jours de courses uniques vont √™tre simul√©s...")

    all_results = []
    
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        
        # On it√®re sur chaque jour, en s'arr√™tant √† l'avant-dernier
        for i in tqdm(range(1, len(sorted_dates)), desc="Simulation chronologique"):
            current_date = sorted_dates[i]
            
            # Donn√©es d'entra√Ænement = tout ce qui s'est pass√© AVANT la date actuelle
            train_df = df_full[df_full['DATE'] < current_date].copy()
            # Donn√©es de test = uniquement les courses de la date actuelle
            test_df = df_full[df_full['DATE'] == current_date].copy()

            if train_df.empty or test_df.empty:
                continue

            # On entra√Æne un nouveau comit√© d'experts sur les donn√©es du pass√©
            lgbm_pipe, xgb_pipe, cat_pipe = train_temporary_model(train_df)
            
            # On pr√©dit sur les courses du jour
            features = [f for f in config.FEATURES_TO_USE if f in test_df.columns]
            X_test = test_df[features]
            
            lgbm_scores = lgbm_pipe.predict(X_test); xgb_scores = xgb_pipe.predict(X_test); cat_scores = cat_pipe.predict(X_test)
            final_scores = (lgbm_scores + xgb_scores + cat_scores) / 3.0
            
            df_pred = test_df[['COURSE_ID', 'NUMERO_CHEVAL', 'COTE_CHEVAL', 'PLACE_CHEVAL']].copy()
            df_pred['SCORE'] = final_scores
            
            # On analyse le r√©sultat pour chaque course de la journ√©e
            for course_id in df_pred['COURSE_ID'].unique():
                df_course_pred = df_pred[df_pred['COURSE_ID'] == course_id].sort_values(by='SCORE', ascending=False)
                
                pred_gagnant = df_course_pred.iloc[0]['NUMERO_CHEVAL']
                vrai_gagnant = df_course_pred.loc[df_course_pred['PLACE_CHEVAL'].idxmin()]['NUMERO_CHEVAL']
                
                cote_gagnant_trouve = pd.to_numeric(df_course_pred.iloc[0]['COTE_CHEVAL'], errors='coerce') if pred_gagnant == vrai_gagnant else 0

                all_results.append({
                    'Gagnant_Trouve': 1 if pred_gagnant == vrai_gagnant else 0,
                    'Rapport_Gagnant': cote_gagnant_trouve
                })

    if not all_results:
        print("Pas assez de donn√©es pour un backtest chronologique (il faut au moins 2 jours de courses)."); return

    # --- RAPPORT FINAL ---
    df_report = pd.DataFrame(all_results)
    total_courses = len(df_report)
    total_gagnants_trouves = df_report['Gagnant_Trouve'].sum()
    reussite_gagnant = total_gagnants_trouves / total_courses
    cout_total = total_courses * 1
    gain_total = df_report['Rapport_Gagnant'].sum()
    roi = ((gain_total - cout_total) / cout_total) * 100
    
    print("\n\n--- üìä RAPPORT DE BACKTESTING CHRONOLOGIQUE FINAL üìä ---")
    print(f"Courses simul√©es           : {total_courses}")
    print(f"Gagnants correctement pr√©dits : {total_gagnants_trouves} ({reussite_gagnant:.2%})")
    print("---")
    print("Simulation de Rentabilit√© (strat√©gie: 1‚Ç¨ sur le 'Simple Gagnant' pr√©dit)")
    print(f"Co√ªt total des mises       : {cout_total:.2f} ‚Ç¨")
    print(f"Gains totaux               : {gain_total:.2f} ‚Ç¨")
    print(f"B√©n√©fice / Perte           : {gain_total - cout_total:.2f} ‚Ç¨")
    print(f"Retour sur Investissement (ROI): {roi:.2f} %")
    print("-------------------------------------------------")

if __name__ == '__main__':
    run_backtest()
